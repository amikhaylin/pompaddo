//
//  PomPadDo_mobileUITests.swift
//  PomPadDo.mobileUITests
//
//  Created by Andrey Mikhaylin on 16.02.2025.
//
// swiftlint:disable function_body_length

import XCTest

final class PomPadDoMobileUITests: XCTestCase {
    
    var app: XCUIApplication!

    @MainActor override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
        // In UI tests it is usually best to stop immediately when a failure occurs.
        
        continueAfterFailure = false

        app = XCUIApplication()

        if ProcessInfo.processInfo.environment["IS_FASTLANE"] == "YES" {
            setupSnapshot(app)
        }
        
        app.launch()

        addUIInterruptionMonitor(withDescription: "Tracking Usage Permission Alert") { (alert) -> Bool in
            print("Alert appeared: \(alert)")
            if alert.buttons["Allow"].exists {
                alert.buttons["Allow"].tap()
                self.app.activate()
                return true
            }
            return false
        }
                
        // In UI tests it‚Äôs important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }

    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }
    
    @MainActor func testAFullCycle() throws {
        var locale: String!
        if app.navigationBars["Today"].exists {
            locale = "en"
        } else if app.navigationBars["–°–µ–≥–æ–¥–Ω—è"].exists {
            locale = "ru"
        }
        
        let model = UIDevice.current.model
        
        let exp0 = expectation(description: "Test after 5 seconds")
        _ = XCTWaiter.wait(for: [exp0], timeout: 5.0)
        
        // MARK: Create groups
        if model.lowercased().contains("ipad") {
            app.navigationBars[locale == "ru" ? "–°–µ–≥–æ–¥–Ω—è" : "Today"].buttons["ToggleSidebar"].tap()
        } else {
            app.navigationBars[locale == "ru" ? "–°–µ–≥–æ–¥–Ω—è" : "Today"].buttons[locale == "ru" ? "–ù–∞–∑–∞–¥" : "Back"].tap()
        }

        print(app.debugDescription)

        app.buttons["NewProjectGroupButton"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" : "Group name"].tap()
        
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" : "Group name"].typeText(locale == "ru" ? "ü¶ù –õ–∏—á–Ω–æ–µ" : "ü¶ù Personal")
        app.buttons["SaveGroup"].tap()
        
        app.buttons["NewProjectGroupButton"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" : "Group name"].tap()
        
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã" : "Group name"].typeText(locale == "ru" ? "üè¢ –†–∞–±–æ—Ç–∞" : "üè¢ Work")
        app.buttons["SaveGroup"].tap()

        // MARK: Fill projects
        // MARK: Create project **Vacation Planning**
        app.buttons["NewProjectButton"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" : "Project name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" : "Project name"].typeText(locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning")
        
        app.popovers.switches["CreateSimpleList"].children(matching: .switch).element.tap()
        
        app.buttons["SaveProject"].tap()

        app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").buttons[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].press(forDuration: 1.6)
        app.collectionViews.buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –≥—Ä—É–ø–ø—É" : "Add project to group"].tap()
        
        print(app.collectionViews.buttons.debugDescription)
        app.collectionViews.buttons["\(locale == "ru" ? "ü¶ù –õ–∏—á–Ω–æ–µ" : "ü¶ù Personal")ContextMenuButton"].tap()
        
        // MARK: Create project **App Development**
        app.buttons["NewProjectButton"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" : "Project name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞" : "Project name"].typeText(locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development")
        
        app.buttons["SaveProject"].tap()

        app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").buttons[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].press(forDuration: 1.6)
        app.collectionViews.buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–µ–∫—Ç –≤ –≥—Ä—É–ø–ø—É" : "Add project to group"].tap()
        
        print(app.collectionViews.buttons.debugDescription)
        app.collectionViews.buttons["\(locale == "ru" ? "üè¢ –†–∞–±–æ—Ç–∞" : "üè¢ Work")ContextMenuButton"].tap()
        
        if model.lowercased().contains("ipad") {
            app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").buttons[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].tap()
            
            app.otherElements["PopoverDismissRegion"].tap()
        } else {
            app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").staticTexts[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].tap()
        }

        // MARK: Fill Vacation planning tasks
        app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∞–≤–∏–∞–±–∏–ª–µ—Ç—ã" : "Book airline tickets")
        app.popovers.switches["DueToday"].children(matching: .switch).element.tap()
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–ù–∞–π—Ç–∏ –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–µ–ª—å" : "Find and reserve a hotel")
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–°–æ—Å—Ç–∞–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –ø–æ—Å–µ—â–µ–Ω–∏—è" : "Create a list of places to visit")
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–û—Ñ–æ—Ä–º–∏—Ç—å —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫—É—é —Å—Ç—Ä–∞—Ö–æ–≤–∫—É" : "Arrange travel insurance")
        app.buttons["SaveTask"].tap()
        
        if model.lowercased().contains("ipad") {
            app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons["ToggleSidebar"].tap()
        } else {
            app.navigationBars[locale == "ru" ? "üèñÔ∏è –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–ø—É—Å–∫–∞" : "üèñÔ∏è Vacation Planning"].buttons[locale == "ru" ? "–ù–∞–∑–∞–¥" : "Back"].tap()
        }
            
        // MARK: Fill App Development tasks
        if model.lowercased().contains("ipad") {
            app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").buttons[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].tap()
            
            app/*@START_MENU_TOKEN@*/.otherElements["PopoverDismissRegion"]/*[[".otherElements[\"dismiss popup\"]",".otherElements[\"PopoverDismissRegion\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        } else {
            app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").staticTexts[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].tap()
        }
        
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" : "Define functional requirements")
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞" : "Create interface design")
        app.popovers.switches["DueToday"].children(matching: .switch).element.tap()
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –±–µ—Ç–∞-–≤–µ—Ä—Å–∏—é" : "Test the beta version")
        app.buttons["SaveTask"].tap()
        
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons[locale == "ru" ? "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫" : "Add task to current list"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ App Store" : "Launch the app in the App Store")
        app.buttons["SaveTask"].tap()
        
        // MARK: Switch project view
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].segmentedControls["ProjectViewMode"].tap()
        app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].segmentedControls["ProjectViewMode"].buttons["rectangle.split.3x1"].tap()
        
        app.scrollViews.otherElements.collectionViews.staticTexts[locale == "ru" ? "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è" : "Define functional requirements"].press(forDuration: 1.6)
        
        snapshot("03TaskMenu")
        app.collectionViews.buttons[locale == "ru" ? "–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ" : "Move to status"].tap()
        app.collectionViews.buttons["CompletedContextMenuButton"].tap()
        
        snapshot("04ProjectView")
        
        if model.lowercased().contains("ipad") {
            app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons["ToggleSidebar"].tap()
        } else {
            app.navigationBars[locale == "ru" ? "üì±–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è" : "üì±App Development"].buttons[locale == "ru" ? "–ù–∞–∑–∞–¥" : "Back"].tap()
        }
        
        snapshot("02SectionsPanel")
        
        app.collectionViews.matching(identifier: locale == "ru" ? "–ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é" : "Sidebar").staticTexts[locale == "ru" ? "–°–µ–≥–æ–¥–Ω—è" : "Today"].tap()

        app.buttons["FocusSection"].tap()
        
        snapshot("05FocusTasksView")
        
        app.collectionViews.buttons["\(locale == "ru" ? "–°–æ–∑–¥–∞—Ç—å –¥–∏–∑–∞–π–Ω –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞" : "Create interface design")PlayButton"].tap()
        
        let exp = expectation(description: "Test after 5 seconds")
        _ = XCTWaiter.wait(for: [exp], timeout: 5.0)

        snapshot("06FocusTimerView")
        
        app.buttons["TasksSection"].tap()
        
        if model.lowercased().contains("iphone") {
            app.collectionViews.containing(.other, identifier: locale == "ru" ? "–í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–∞—è –ø–æ–ª–æ—Å–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏, 1¬†—Å—Ç—Ä–∞–Ω–∏—Ü–∞" : "Vertical scroll bar, 1 page").element.swipeDown()
        }
        
        let exp2 = expectation(description: "Test after 5 seconds")
        _ = XCTWaiter.wait(for: [exp2], timeout: 5.0)
        
        snapshot("01TodayScreen")
        
        app.buttons["AddTaskToInboxButton"].tap()
        app.popovers.textFields["TaskName"].tap()
        let exp3 = expectation(description: "Test after 5 seconds")
        _ = XCTWaiter.wait(for: [exp3], timeout: 2.0)

        app.popovers.textFields["TaskName"].typeText(locale == "ru" ? "–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ" : "Buy coffee")

//        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].tap()
//        app.popovers.textFields[locale == "ru" ? "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏" : "Task name"].typeText(locale == "ru" ? "–ö—É–ø–∏—Ç—å –∫–æ—Ñ–µ" : "Buy coffee")
        snapshot("07InboxTask")
        app/*@START_MENU_TOKEN@*/.buttons["SaveTask"]/*[[".otherElements[\"SaveTask\"].buttons.firstMatch",".otherElements",".buttons[\"OK\"]",".buttons[\"SaveTask\"]"],[[[-1,3],[-1,2],[-1,1,1],[-1,0]],[[-1,3],[-1,2]]],[0]]@END_MENU_TOKEN@*/.tap()
        
        let exp4 = expectation(description: "Test after 5 seconds")
        _ = XCTWaiter.wait(for: [exp4], timeout: 5.0)
    }
}
// swiftlint:enable function_body_length

extension XCUIElement {
    func forceTap() {
        coordinate(withNormalizedOffset: CGVector(dx: 0.5, dy: 0.5)).tap()
    }
}
